import math

# üöÄ Exerc√≠cio 1: Crie uma fun√ß√£o que receba dois n√∫meros e retorne o maior
# deles.


def bigger(intA, intB):
    if intA > intB:
        return intA
    else:
        return intB


print(f'O maior n√∫mero entre 10 e 20 √©: {bigger(10, 20)}')

# üöÄ Exerc√≠cio 2: Calcule a m√©dia aritm√©tica dos valores contidos em uma lista.

array = [10, 3, 6, 23, 11, 1]
divider = len(array)
totalSum = sum(array)
arithmeticAverage = totalSum / divider

print(f'A m√©dia aritm√©tica da lista √© de {arithmeticAverage}')

# Exerc√≠cio 3: Fa√ßa um programa que, dado um valor n qualquer, tal que n > 1
# imprima na tela um quadrado feito de asteriscos de lado de tamanho n. Por
# exemplo:
# ü¶úDica: Python sabe multiplicar sequ√™ncias! Por exemplo, 3 * 'bla' resulta
# em blablabla. Isso se aplica a listas tamb√©m, caso voc√™ precise.


def asteriscs(number):
    for num in list(range(number)):
        print(number * '* ')


asteriscs(5)

# üöÄ Exerc√≠cio 4: Crie uma fun√ß√£o que receba uma lista de nomes e retorne o
# nome com a maior quantidade de caracteres. Por exemplo, para
# ["Jos√©", "Lucas", "N√°dia", "Fernanda", "Cairo", "Joana"], o retorno deve
# ser "Fernanda".
# ü¶ú Uma dica: Utilize a fun√ß√£o len() para verificar o tamanho do nome.


def biggestName(listOfNames):
    biggerName = listOfNames[0]
    for name in listOfNames:
        if len(name) >= len(biggerName):
            biggerName = name
    print(biggerName)


biggestName(["Jos√©", "Lucas", "N√°dia", "Fernanda", "Cairo", "Joana"])

# Exerc√≠cio 5: Considere que a cobertura da tinta √© de 1 litro para cada 3
# metros quadrados e que a tinta √© vendida em latas de 18 litros, que
# custam R$ 80,00. Crie uma fun√ß√£o que retorne dois valores em uma tupla
# contendo a quantidade de latas de tinta a serem compradas e o pre√ßo total a
# partir do tamanho de uma parede (em m¬≤).


coverage = 3
price = 80
size = 18
canCapacity = size * coverage


def cansAndPrice(square_meters):
    neededLiters = square_meters / coverage
    neededCans = math.ceil(neededLiters / size)
    priceToPay = neededCans * price
    answer = (neededCans, priceToPay)
    return print(f'A quantidade necess√°ria de de latas de tinta e pre√ßo \n\
                  √©:{answer}')


cansAndPrice(12)
cansAndPrice(120)


# Exerc√≠cio 6: Crie uma fun√ß√£o que receba os tr√™s lado de um tri√¢ngulo e
# informe qual o tipo de tri√¢ngulo formado ou "n√£o √© triangulo", caso n√£o
# seja poss√≠vel formar um tri√¢ngulo.


def isItTriangle(side1, side2, side3):
    is_triangle = (
            side1 + side2 > side3 and
            side2 + side3 > side1 and
            side1 + side3 > side2
    )
    if not is_triangle:
        return "n√£o √© tri√¢ngulo"
    elif side1 == side2 == side3:
        return "equil√°tero"
    elif side1 == side2 or side2 == side3 or side1 == side3:
        return "is√≥sceles"
    else:
        return "escaleno"


print(isItTriangle(10, 10, 10))
print(isItTriangle(10, 10, 13))
print(isItTriangle(13, 12, 10))
print(isItTriangle(13, 12, 1))
